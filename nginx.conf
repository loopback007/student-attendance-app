# nginx.conf

# User and worker processes (can be adjusted based on server resources)
# user www-data; # Or nginx, depending on your Nginx installation if not in Docker
worker_processes auto; # auto usually means number of CPU cores
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768; # Max connections per worker
    # multi_accept on; # Accept as many connections as possible
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off; # Hide Nginx version for security

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip Settings (compress responses)
    gzip on;
    gzip_disable "msie6"; # Disable for old IE versions
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Define an upstream for the Gunicorn application server
    # 'app' is the service name defined in docker-compose.yml
    # Docker Compose networking allows services to reach each other by their service name.
    upstream flask_app {
        server app:5000; # Gunicorn runs on port 5000 inside the 'app' container
    }

    server {
        listen 80; # Listen on port 80 for incoming HTTP requests
        # listen [::]:80; # Listen on IPv6 as well if needed
        
        # server_name your_domain.com www.your_domain.com; # Replace with your actual domain if you have one
        server_name localhost; # For local development

        # Location for static files
        # Assumes your Flask static files are in /app/app/static inside the container
        # The 'alias' directive maps this location to the filesystem path.
        # The path /app/app/static must match where your static files are within the Docker image for the 'app' service.
        # If you mount app/static from host to nginx container, the path would be different.
        # Our current docker-compose.yml does not mount static files directly to nginx,
        # so nginx would need to proxy static requests to gunicorn, or we adjust.
        # For better performance, Nginx should serve static files.
        # Let's assume static files are accessible via /app/app/static in the app container,
        # and we'll proxy them if not directly mounted to Nginx.
        # A common pattern is to have a shared volume for static files or collect them.

        # For now, let's proxy static files through Gunicorn/Flask as well,
        # which is simpler for initial setup but less performant.
        # WhiteNoise can be used with Gunicorn for this.
        # If you want Nginx to serve static files directly, you'd need to:
        # 1. Ensure static files are accessible to the Nginx container (e.g., via a shared volume).
        # 2. Add a location block like:
        # location /static/ {
        #     alias /path/to/your/static/files/in/nginx/container/;
        #     expires 30d;
        #     add_header Cache-Control "public";
        # }

        # Location for all other requests (application)
        location / {
            # Try to serve request as a file, then as a directory, then fall back to proxy
            # try_files $uri $uri/ @proxy_to_app; # Useful if Nginx also serves some static content directly from root

            # Proxy settings
            proxy_pass http://flask_app; # Pass requests to the Gunicorn upstream
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name; # Pass original host
            
            # To handle WebSockets if your app uses them
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection "upgrade";
        }

        # Optional: Fallback location if try_files is used
        # location @proxy_to_app {
        #     proxy_pass http://flask_app;
        #     proxy_redirect off;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # Optional: Deny access to hidden files (e.g., .htaccess, .git)
        location ~ /\. {
            deny all;
        }
    }
}
